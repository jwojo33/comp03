import numpy as np
import rx_data_2 as rx_data

class ReactorSlice:
    def __init__(self,dx,compositions, rxdata, nuclides):
        self.evolution_compositions = {}
        self.evolution_compositions[0] = compositions
        self.dx = dx
        self.microxs = rxdata[0]
        self.fissionyield = rxdata[1]
        self.rrm = self.compute_reaction_rate_matrix
        self.nuclides = nuclides
        self.d = None
        self.sig_a = None
        self.sig_f = None
        self.flux = 0

    def calculate_d(self,time):
        #print(self.nuclides)
        #print(self.microxs.keys())
        sig_s = 0.
        for i in range(len(self.evolution_compositions[time])):
            sig_s += self.evolution_compositions[time][i] * self.microxs[self.nuclides[i]]['xs_scattering'] * 1e-24
            print(self.nuclides[i])
        #if sig_s != 0:
        d = 1 / (3 * sig_s)
        #else:
         #   d = 0

        self.d = d

    def calculate_sigma_a(self,time):
        sigma_a = 0.
        for i in range(len(self.evolution_compositions[time])):
            sigma_a += self.evolution_compositions[time][i] * self.microxs[self.nuclides[i]]['xs_absorption'] * 1e-24
        self.sig_a = sigma_a

    def calculate_sigma_f(self, time):
        sigma_f = 0.
        for i in range(len(self.evolution_compositions[time])):
            sigma_f += self.evolution_compositions[time][i] * self.microxs[self.nuclides[i]]['xs_fission'] * 1E-24
        self.sig_f = sigma_f

    def calculate_constants(self,time):
        self.calculate_d(time)
        self.calculate_sigma_a(time)
        self.calculate_sigma_f(time)
        return [self.d, self.sig_a, self.sig_f]

    def compute_reaction_rate_matrix(self):

        rrm = np.zeros((len(self.nuclides), len(self.nuclides)))
        xs = rx_data.microscopic_cross_sections
        fy = rx_data.fission_yield
        #print('flux', self.flux)
        # U235
        rrm[self.nuclides.index('U235'), self.nuclides.index('U235')] = - 1e-24 * self.flux * (
                    xs['U235']['xs_absorption'] + xs['U235']['xs_fission'])
        # U238
        rrm[self.nuclides.index('U238'), self.nuclides.index('U238')] = - 1e-24 * self.flux * (xs['U238']['xs_absorption'])
        # Pu239
        rrm[self.nuclides.index('Pu239'), self.nuclides.index('U238')] = 1e-24 * self.flux * (xs['U238']['xs_absorption'])
        rrm[self.nuclides.index('Pu239'), self.nuclides.index('Pu239')] = - 1e-24 * self.flux * (
                    xs['Pu239']['xs_absorption'] + xs['Pu239']['xs_fission'])
        # Pu240
        rrm[self.nuclides.index('Pu240'), self.nuclides.index('Pu239')] = 1e-24 * self.flux * (xs['Pu239']['xs_absorption'])
        # Pu241
        rrm[self.nuclides.index('Pu241'), self.nuclides.index('Pu240')] = 1e-24 * self.flux * (xs['Pu240']['xs_absorption'])
        rrm[self.nuclides.index('Pu241'), self.nuclides.index('Pu241')] = - 1e-24 * self.flux * (
                    xs['Pu241']['xs_absorption'] + xs['Pu241']['xs_fission'])
        # Pu242
        rrm[self.nuclides.index('Pu242'), self.nuclides.index('Pu241')] = 1e-24 * self.flux * (xs['Pu241']['xs_absorption'])
        # I135
        rrm[self.nuclides.index('I135'), self.nuclides.index('I135')] = - 1e-24 * self.flux * xs['I135']['xs_absorption'] - xs['I135']['lambda']
        rrm[self.nuclides.index('I135'), self.nuclides.index('U235')] = 1e-24 * self.flux * fy['U235']['I135'] * (xs['U235']['xs_fission'])
        rrm[self.nuclides.index('I135'), self.nuclides.index('Pu239')] = 1e-24 * self.flux * fy['Pu239']['I135'] * (xs['Pu239']['xs_fission'])
        rrm[self.nuclides.index('I135'), self.nuclides.index('Pu241')] = 1e-24 * self.flux * fy['Pu241']['I135'] * (xs['Pu241']['xs_fission'])
        # Xe135
        rrm[self.nuclides.index('Xe135'), self.nuclides.index('Xe135')] = - 1e-24 * self.flux * xs['Xe135']['xs_absorption'] - xs['Xe135'][
            'lambda']
        rrm[self.nuclides.index('Xe135'), self.nuclides.index('I135')] = xs['I135']['lambda']
        rrm[self.nuclides.index('Xe135'), self.nuclides.index('U235')] = 1e-24 * self.flux * fy['U235']['Xe135'] * (xs['U235']['xs_fission'])
        rrm[self.nuclides.index('Xe135'), self.nuclides.index('Pu239')] = 1e-24 * self.flux * fy['Pu239']['Xe135'] * (xs['Pu239']['xs_fission'])
        rrm[self.nuclides.index('Xe135'), self.nuclides.index('Pu241')] = 1e-24 * self.flux * fy['Pu241']['Xe135'] * (xs['Pu241']['xs_fission'])
        # LP
        rrm[self.nuclides.index('LP'), self.nuclides.index('U235')] = 1e-24 * self.flux * (2 - fy['U235']['Xe135'] - fy['U235']['I135']) * \
                                                  xs['U235']['xs_fission']
        rrm[self.nuclides.index('LP'), self.nuclides.index('Pu239')] = 1e-24 * self.flux * (2 - fy['Pu239']['Xe135'] - fy['Pu239']['I135']) * \
                                                   xs['Pu239']['xs_fission']
        rrm[self.nuclides.index('LP'), self.nuclides.index('Pu241')] = 1e-24 * self.flux * (2 - fy['Pu241']['Xe135'] - fy['Pu241']['I135']) * \
                                                   xs['Pu241']['xs_fission']
        #H2O
        rrm[self.nuclides.index('H2O'), self.nuclides.index('H2O')] = 0

        self.rrm = rrm
        #print('reaction_rate_matrix', rrm)

    def evolution_solver(self, dt, time):
        # print(self.rrm)
        # print(self.evolution_compositions)
        rrm_id = np.identity(len(self.evolution_compositions[time])) - (dt * self.rrm)
        compositions = np.linalg.solve(rrm_id, self.evolution_compositions[time])
        self.evolution_compositions[time+dt] = compositions
